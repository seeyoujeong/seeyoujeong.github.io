---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import BookPreview from '../../components/BookPreview.astro';

export async function getStaticPaths() {
  const books = await getCollection('book');
  const postCount = books.length;
  return books.map((book, index) => ({
    params: { slug: book.slug },
    props: {
      book,
      prevPost: index + 1 !== postCount ? books[index + 1] : null,
      nextPost: index !== 0 ? books[index - 1] : null
    }
  }));
}

type Props = { book: CollectionEntry<'book'>; prevPost: CollectionEntry<'book'>; nextPost: CollectionEntry<'book'> };

const { href } = Astro.url;
const { book, prevPost, nextPost } = Astro.props;
const { title, excerpt, seo } = book.data;
const { Content } = await book.render();
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
  <article class="mb-16 sm:mb-24">
    <header class="mb-8">
      <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
    </header>
    <div class="max-w-none prose prose-dante sm:prose-lg">
      <Content />
    </div>
    <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-end sm:mt-12 sm:text-base">
      <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
    </div>
  </article>
  {
    (prevPost || nextPost) && (
      <div class="my-16 sm:my-24">
        <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
        {nextPost && <BookPreview book={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
        {prevPost && <BookPreview book={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
      </div>
    )
  }
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
    copyUrlButton?.addEventListener('click', async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute('data-url') || '';
      let label = button.innerText;

      await navigator.clipboard.writeText(url);

      button.innerText = 'Copied';

      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }
  });
</script>
